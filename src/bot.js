const { Telegraf } = require('telegraf');
const { getSmile } = require('./helper/get-smile');
const { getSmileForWind } = require('./helper/get-smile-for-wind');
const axios = require('axios');
const { getMessages, getAllUsersMessages, saveMessage } = require('./database/database')

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name}! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n` +
              `\n‚ú® <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
              `üîß /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n` +
              `üì• /getMyMessages - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
              `üåç /getAllUsersMessages - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
              `üìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–∞—è —É —Ç–µ–±—è –ø–æ–≥–æ–¥–∞\n` +
              `üí¨ –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Ç–∏–∫–µ—Ä, —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ\n` +
              `üëã –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ —Å–ø—Ä–æ—Å–∏, –∫–∞–∫ —É –º–µ–Ω—è –¥–µ–ª–∞!`, 
              { parse_mode: 'HTML' });
});

bot.help((ctx) => {
    ctx.reply(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n` +
              `- /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n` +
              `- /getMyMessages - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
              `- /getAllUsersMessages - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
              `- –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–∞—è —É —Ç–µ–±—è –ø–æ–≥–æ–¥–∞\n` +
              `- –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Ç–∏–∫–µ—Ä, —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ\n` +
              `- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ —Å–ø—Ä–æ—Å–∏, –∫–∞–∫ —É –º–µ–Ω—è –¥–µ–ª–∞!`);
});
bot.on('sticker', (ctx) => ctx.reply('–Ω–∞ —Ç–µ–±–µ üëÖ'));
bot.hears('–ü—Ä–∏–≤–µ—Ç', (ctx) => ctx.reply('–ø—Ä–∏–≤–µ—Ç –ø—Ä–∏–≤–µ—Ç –∞ –≤—ã–ø–∏—Ç—å –Ω–µ—Ç'));
bot.hears('–ö–∞–∫ –¥–µ–ª–∞?', (ctx) => ctx.reply('–Ø –±–æ—Ç, –ø–æ-—ç—Ç–æ–º—É –¥–µ–ª –Ω–µ—Ç'));

bot.command('getMyMessages', (ctx) => {
    const userId = ctx.message.from.id; 
    getMessages(userId, (messages) => {
        if (messages.length === 0) {
            return ctx.reply('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
        }
        const formattedMessages = messages.map((msg) => `–°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.message}\n–í—Ä–µ–º—è: ${msg.timestamp}`).join('\n\n');
        ctx.reply(formattedMessages);
    });
});

bot.command('getAllUsersMessages', (ctx) => {
    const userId = ctx.message.from.id; 
    console.log('ctx',ctx)
    getAllUsersMessages( (messages) => {
        if (messages.length === 0) {
            return ctx.reply('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
        }
        console.log('messages',messages)
        const formattedMessages = messages.map((msg) => `${userId === msg.user_id ? '–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:': '–ß—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:'} ${msg.message}\n–í—Ä–µ–º—è: ${msg.timestamp}`).join('\n\n');
        ctx.reply(formattedMessages);
    });
});


bot.on('message', async (ctx) => {
    if (ctx.message.location) {
        const headers = {
            'X-Yandex-Weather-Key': process.env.YANDEX_API_KEY
        };
        const yandexWeather = `https://api.weather.yandex.ru/v2/forecast?lat=${ctx.message.location.latitude}&lon=${ctx.message.location.longitude}`;
        const yandexResponse = await axios.get(yandexWeather, { headers });
        const { temp, feels_like, wind_speed } = yandexResponse.data.fact;


        ctx.reply(`–ó–∞ –±–æ—Ä—Ç–æ–º —Å–µ–π—á–∞—Å  - ${temp} ${getSmile(temp)}\n` +
                  `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ - ${feels_like} ${getSmile(feels_like)}\n` +
                  `–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - ${wind_speed} ${getSmileForWind(wind_speed)}`);
    } else if (ctx.message.text) {
        saveMessage(ctx.message.from.id, ctx.message.text);
    }
});



module.exports = { bot };


